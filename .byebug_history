c
tweet.to_emojis
c
tweet.to_emojis
c
tweet.to_emojis
tweet
continue
tweet.to_emojis
tweet = Sentence.new params['sentence']
c
tweet.to_emojis
tweet = Sentence.new params['sentence']
continue
reload!
tweet.to_emojis
Sentence.to_emojis
tweet = Sentence.new params['sentence']
tweet.ignore_word?
tweet.class
Sentence.to_emojis
tweet.to_emojis
tweet = Sentence.new params['sentence']
continue
tweet.public_methods false
tweet.to_emojis
tweet = Sentence.new params['sentence']
continue
tweet.to_emojis
tweet.public_methods false
tweet.public_methods
tweet.to_emojis
tweet = Sentence.new params['sentence']
continue
tweet.to_emojis
tweet
tweet = Sentence.new params['sentence']
tweet = Sentence.new
tweet
n
continue
params['sentence']
tweet = Sentance.new(params['sentence'])
tweet = Sentence.new(params['sentence'])
tweet
tweet = Sentance.new(params['sentence'])
continue
thing.to_emojis
thing
thing = Sentance.new(params['sentence'])
c
found = Keyword.find_by(keyword: 'house')d
found = Keyword.find_by(keyword: 'house')
found = Keyword.find_by(keyword: str)
str
found = Keyword.find_by?(keyword: str)
str
word
c
if found
found = Keyword.find_by?(keyword: str)
found
c
Keyword.find_by(keyword: str).emoji.try? image
Keyword.find_by(keyword: str).emoji.image
continue
f
q
c
cc
c
Keyword.find_by(keyword: "dog").emoji
Keyword.find_by(keyword: "dog").eomji
Emoji.find(265)
Keyword.find_by(keyword: "dog")
word
test_str = Keyword.exists?(keyword: word)
c
emoji_array
c
Keyword.where keyword: 'face'
Keyword.find_by keyword: 'face'
Keyword.find_by keyword: 'do'
Keyword.find_by keyword: 'dog'
Keyword.find keyword: 'dog'
thing
thing.count
thing = Keyword.select keyword: 'dog'
Keyword.select keyword: 'dog'
Keyword.exists? keyword: 'dog'
Keyword.first
Keyword.count
Keyword.exists? 'dog'
thing.first
thing
thing = Keyword.select("LOWER(keyword) LIKE LOWER(?)", "#{str}")
Keyword.select("LOWER(keyword) LIKE LOWER(?)", "#{str}")
Keyword.where("LOWER(keyword) LIKE LOWER(?)", "#{str}").first
Keyword.select("LOWER(keyword) LIKE LOWER(?)", "#{str}")
Keyword.where("LOWER(keyword) LIKE LOWER(?)", "do").first
Keyword.where("LOWER(keyword) LIKE LOWER(?)", "#{str}").first
str
c
looper('doghouse')
c
word
keyword_hash = Keyword.where("LOWER(keyword) LIKE LOWER(?)", "#{word}").first
c
keyword_hash = Keyword.where("LOWER(keyword) LIKE LOWER(?)", "#{word}").first
c
v
c
n
word
c
'i am a cat'.to_emojis
  ignore_list.any? { |item| word.include?(item) }
ignore_list = ['@', '#', 'http']
word = 'taco'
  ignore_list.any? { |item| word.include?(item) }
ignore_list = ['@', '#', 'http']
word = '@man'
  ignore_list.any? { |item| word.include?(item) }
ignore_list = ['@', '#', 'http']
ignore_word?('@house')
ignore_word('@house')
'i am a cat @house'.to_emojis
'i am a cat'.to_emojis
continue
@spanish = translator.translate('Hello. This will be translated!', :from => 'en', :to => 'es')
translator = BingTranslator.new('COGNITIVE_SUBSCRIPTION_KEY')
@spanish = translator.translate('Hello. This will be translated!', :from => 'en', :to => 'es')
@spanish
c
res
n
text = params['text']
text
params['text']
params['test']
params
continue
params
continue
params
quit
spanish = translator.translate('This will be translated!', :from => 'en', :to => 'es')
response["Access-Control-Allow-Origin"] = "*"
spanish = translator.translate('This will be translated!', :from => 'en', :to => 'es')
spanish = translator.translate('',:from => 'en', :to => 'es')
translator = BingTranslator.new(ENV['COGNITIVE_SUBSCRIPTION_KEY'])
@translator
quit
continue
translator.
spanish = translator.translate('',:from => 'en', :to => 'es')
spanish = translator.translate(:from => 'en', :to => 'es')
translator.translate
translator.public_methods false
translator.puclib_methods false
translator.initialize
translator.private_methods false
translator.private_methods
translator = BingTranslator.new(ENV['COGNITIVE_SUBSCRIPTION_KEY'])
translator = BingTranslator.new(ENV['COGNITIVE_SUBSCRIPTION_KEY'],'c9be67533f234fa1994baf3ab4a1a4b8')
spanish = translator.translate('This will be translated!', :from => 'en', :to => 'es')
spanish = translator.translate('Hello. This will be translated!', :from => 'en', :to => 'es')
spanish = translator.translate('Hello. This will be translated!', :from => 'en', :to => 'es').remove_namespaces!
spanish = translator.translate('Hello. This will be translated!', :to => 'en')
spanish = translator.translate('Hello. This will be translated!', :to => 'en').remove_namespaces!
spanish = translator.translate('Hello. This will be translated!', :from => 'en', :to => 'en').remove_namespaces!
whereami
spanish = translator.translate('Hello. This will be translated!', :from => 'en', :to => 'en').remove_namespaces!
translator.public_methods(false)
translator.language_names
translator = BingTranslator.new(ENV['COGNITIVE_SUBSCRIPTION_KEY'])
spanish = translator.translate('Hello. This will be translated!', :from => 'en', :to => 'es').remove_namespaces!
spanish = translator.translate('Hello. This will be translated!', :from => 'en', :to => 'es')
translator = BingTranslator.new(ENV['COGNITIVE_SUBSCRIPTION_KEY'])
continue
c
spanish = translator.translate('Hello. This will be translated!', :from => 'en', :to => 'es')
spanish = translator.translate('Hello. This will be translated!', :from => 'en', :to => 'es').to_s
spanish = translator.translate('Hello. This will be translated!', :from => 'en', :to => 'es')
spanish = translator.translate 'Hello. This will be translated!'
translator.public_methods
translator
spanish
spanish.errors
spanish = translator.translate('Hello. This will be translated!', :from => 'en', :to => 'es')
translator = BingTranslator.new('COGNITIVE_SUBSCRIPTION_KEY')
spanish = translator.translate('Hello. This will be translated!', :from => 'en', :to => 'es')
continue
c
tweet[language.to_sym]
tweet.send([language.to_sym])
tweet.send language
language.class
language
tweet.send([language])
tweet.send [language]
tweet.send language
language
:language
tweet.send :language
tweet[:emoji]
tweet['emoji']
tweet.emoji
tweet_emoji
tweet
pretty_print(tweet)
tweet.pretty_print
tweet.prettify
tweet.to_yaml
tweet
c
locals
c
locals
loc
locals
c
@translated
c
@translated.first.class
@translated.first['tweet_text_with_info']
@translated.first.tweet_text_with_info
@translated.first.tweet_text_with_infp
@translated.first
@translated
@tweets.first.methods | grep emoji
@tweets.first.methods(false)
@tweets.first.methods
@tweets.first#rus
@tweets.first#russian
@tweets.first#emoji.methods
@tweets.first#emoji.public_methods
@tweets.first#emoji
@tweets.first.emoji
@tweets.first['emoji']
@tweets.first.include?
@tweets.first
@tweets.forst
@tweets
c
@tweets.include?(:emoji)
@tweets.contains
@tweets.contains?
@tweets
c
@tweets.first.private_methods
@tweets[1]
@tweets.first
@tweets.count
@tweets.class
typeof(@tweets)
